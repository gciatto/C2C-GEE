/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
    implementation libs.fastutil
    implementation libs.jspecify
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass.set("it.unibo.c2c.CommandLineMain")
}

def inputFile = file("src/test/resources/it/unibo/c2c/input.csv")

def properties = ['revertBand', 'negativeMagnitudeOnly', 'regrowthMetrics', 'postMetrics', 'infill', 'spikesTolerance']

tasks.getByName("run") {
    args = properties.collect { "--$it=${project.property(it)}" } + [inputFile]
}

properties.each { arg ->
    tasks.register("runWith${arg.capitalize()}", JavaExec) {
        group = "application"
        classpath = sourceSets.main.runtimeClasspath
        mainClass.set(application.mainClass)
        args = ["--${arg}", inputFile]
        doFirst {
            println("# Running class ${mainClass.get()} with args: ${args}")
        }
    }
}

["revert", "filter", "default"].each { cmd ->
    tasks.register("generateTestDataFor${cmd.capitalize()}", JavaExec) {
        group = "verification"
        classpath = sourceSets.test.runtimeClasspath
        mainClass.set("it.unibo.c2c.TransformOutput")
        args = [cmd]
        doFirst {
            println("Running class ${mainClass.get()} with args: ${args}")
        }
    }
}
